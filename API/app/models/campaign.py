"""
Pydantic models for campaign requests and responses.

These models define the structure of data that comes into and goes out of our API.
They provide automatic validation, serialization, and documentation.
"""

from typing import Optional, List, Dict, Any, Literal
from datetime import datetime
from pydantic import BaseModel, Field, validator
from enum import Enum


class CampaignStatus(str, Enum):
    """
    Possible states of a marketing campaign.
    
    This enum ensures we only use valid status values throughout the API.
    """
    PENDING = "pending"           # Campaign created, waiting to start
    PROCESSING = "processing"     # Currently being generated
    COMPLETED = "completed"       # Successfully completed
    FAILED = "failed"            # Generation failed
    CANCELLED = "cancelled"       # User cancelled the campaign


class CampaignOptions(BaseModel):
    """
    Optional configuration for campaign generation.
    
    These settings allow users to customize how their campaign is generated.
    """
    channels: Optional[List[str]] = Field(
        default=None,
        description="Specific channels to target (e.g., ['instagram', 'email']). If not provided, uses all enabled channels.",
        example=["instagram", "email", "facebook"]
    )
    
    tone: Optional[str] = Field(
        default=None,
        description="Desired tone for the marketing copy (e.g., 'professional', 'casual', 'urgent')",
        example="professional"
    )
    
    budget: Optional[str] = Field(
        default=None,
        description="Campaign budget for planning purposes",
        example="$500"
    )
    
    include_images: bool = Field(
        default=True,
        description="Whether to generate AI images for the campaign"
    )
    
    dry_run: bool = Field(
        default=True,
        description="If true, saves files locally instead of actually sending emails/posts"
    )
    
    webhook_url: Optional[str] = Field(
        default=None,
        description="URL to call when campaign generation is complete",
        example="https://your-app.com/webhook/campaign-complete"
    )

    @validator('channels')
    def validate_channels(cls, v):
        """Ensure channels are valid options."""
        if v is not None:
            valid_channels = ['email', 'instagram', 'facebook', 'linkedin', 'twitter']
            invalid = [ch for ch in v if ch.lower() not in valid_channels]
            if invalid:
                raise ValueError(f"Invalid channels: {invalid}. Valid options: {valid_channels}")
            return [ch.lower() for ch in v]  # Normalize to lowercase
        return v


class CampaignRequest(BaseModel):
    """
    Request model for creating a new marketing campaign.
    
    This is what users send to the API when they want to create a campaign.
    """
    user_input: str = Field(
        ...,  # Required field
        description="Natural language description of the marketing campaign to create",
        example="promote eco-friendly water bottle for outdoor enthusiasts with $300 budget",
        min_length=10,
        max_length=500
    )
    
    options: CampaignOptions = Field(
        default_factory=CampaignOptions,
        description="Optional configuration for campaign generation"
    )

    @validator('user_input')
    def validate_user_input(cls, v):
        """Ensure user input is meaningful."""
        v = v.strip()
        if len(v) < 10:
            raise ValueError("User input must be at least 10 characters long")
        return v


class CampaignProgress(BaseModel):
    """
    Progress information for a campaign being processed.
    
    This helps users track how their campaign generation is progressing.
    """
    current_step: str = Field(
        description="Name of the current processing step",
        example="image_generation"
    )
    
    completed_steps: List[str] = Field(
        description="List of steps that have been completed",
        example=["parse_intent", "creative_brief", "text_generation"]
    )
    
    total_steps: int = Field(
        description="Total number of steps in the campaign generation process",
        example=7
    )
    
    percentage: int = Field(
        description="Completion percentage (0-100)",
        ge=0,
        le=100,
        example=57
    )
    
    estimated_completion: Optional[datetime] = Field(
        description="Estimated completion time (if available)",
        example="2024-01-15T10:30:00Z"
    )


class GeneratedContent(BaseModel):
    """
    The actual content generated by the marketing agent.
    
    This includes all the creative assets produced for the campaign.
    """
    marketing_copy: str = Field(
        description="AI-generated marketing text/copy",
        example="Discover the future of hydration with our eco-friendly water bottle..."
    )
    
    hashtags: List[str] = Field(
        description="Generated hashtags for social media",
        example=["#EcoFriendly", "#Hydration", "#OutdoorLife"]
    )
    
    ctas: List[str] = Field(
        description="Call-to-action phrases",
        example=["Shop Now and Save the Planet!", "Start Your Eco Journey Today!"]
    )
    
    image_url: Optional[str] = Field(
        description="URL to the generated campaign image",
        example="https://api.example.com/files/camp_123/image.png"
    )
    
    image_prompt: Optional[str] = Field(
        description="The prompt used to generate the image",
        example="Professional product photo of eco-friendly water bottle in nature setting"
    )


class DeliveryResult(BaseModel):
    """
    Results of campaign delivery to different channels.
    
    Shows which channels were successful and which failed.
    """
    channel: str = Field(description="Channel name", example="email")
    status: Literal["success", "failed", "skipped"] = Field(description="Delivery status")
    message: str = Field(description="Status message or error details")
    file_path: Optional[str] = Field(description="Path to generated file (if applicable)")


class PerformanceMetrics(BaseModel):
    """
    Performance and resource usage metrics for the campaign.
    
    Useful for monitoring and optimization.
    """
    total_tokens: int = Field(
        description="Total AI tokens consumed",
        example=487
    )
    
    generation_time_seconds: float = Field(
        description="Total time taken to generate the campaign",
        example=26.3
    )
    
    llm_calls: int = Field(
        description="Number of AI model calls made",
        example=4
    )
    
    models_used: List[str] = Field(
        description="AI models used in generation",
        example=["gpt-4o", "dall-e-3"]
    )


class CampaignFiles(BaseModel):
    """
    URLs to downloadable files generated for the campaign.
    
    Users can access these files directly through the API.
    """
    image: Optional[str] = Field(
        description="URL to campaign image file",
        example="https://api.example.com/files/camp_123/image.png"
    )
    
    email_html: Optional[str] = Field(
        description="URL to HTML email file", 
        example="https://api.example.com/files/camp_123/email.html"
    )
    
    email_text: Optional[str] = Field(
        description="URL to plain text email file",
        example="https://api.example.com/files/camp_123/email.txt"
    )
    
    instagram_post: Optional[str] = Field(
        description="URL to Instagram post content file",
        example="https://api.example.com/files/camp_123/instagram.txt"
    )
    
    facebook_post: Optional[str] = Field(
        description="URL to Facebook post content file",
        example="https://api.example.com/files/camp_123/facebook.txt"
    )


class CampaignResponse(BaseModel):
    """
    Complete response model for a marketing campaign.
    
    This is the full data structure returned when requesting campaign details.
    """
    campaign_id: str = Field(
        description="Unique identifier for the campaign",
        example="camp_abc123def456"
    )
    
    status: CampaignStatus = Field(
        description="Current status of the campaign"
    )
    
    created_at: datetime = Field(
        description="When the campaign was created",
        example="2024-01-15T09:00:00Z"
    )
    
    completed_at: Optional[datetime] = Field(
        description="When the campaign was completed (if finished)",
        example="2024-01-15T09:30:00Z"
    )
    
    user_input: str = Field(
        description="Original user request",
        example="promote eco-friendly water bottle for outdoor enthusiasts"
    )
    
    options: CampaignOptions = Field(
        description="Configuration used for this campaign"
    )
    
    progress: Optional[CampaignProgress] = Field(
        description="Progress information (only present during processing)"
    )
    
    # Results (only present when completed)
    parsed_intent: Optional[Dict[str, Any]] = Field(
        description="Extracted campaign intent and parameters"
    )
    
    generated_content: Optional[GeneratedContent] = Field(
        description="AI-generated campaign content"
    )
    
    delivery_results: Optional[List[DeliveryResult]] = Field(
        description="Results of content delivery to channels"
    )
    
    performance_metrics: Optional[PerformanceMetrics] = Field(
        description="Performance and resource usage metrics"
    )
    
    files: Optional[CampaignFiles] = Field(
        description="URLs to downloadable campaign files"
    )
    
    error_message: Optional[str] = Field(
        description="Error message if campaign failed"
    )


class CampaignCreateResponse(BaseModel):
    """
    Response when a new campaign is created.
    
    Returns immediately with the campaign ID for tracking.
    """
    campaign_id: str = Field(
        description="Unique identifier for the created campaign",
        example="camp_abc123def456"
    )
    
    status: CampaignStatus = Field(
        description="Initial status (usually 'pending')",
        example="pending"
    )
    
    message: str = Field(
        description="Success message",
        example="Campaign created successfully. Use the campaign_id to track progress."
    )
    
    estimated_completion_time: Optional[str] = Field(
        description="Estimated time to completion",
        example="25-30 seconds"
    )
    
    status_url: str = Field(
        description="URL to check campaign status",
        example="/api/v1/campaigns/camp_abc123def456/status"
    )
    
    websocket_url: str = Field(
        description="WebSocket URL for real-time updates",
        example="/api/v1/campaigns/camp_abc123def456/stream"
    )


class CampaignListResponse(BaseModel):
    """
    Response for listing multiple campaigns.
    
    Used when users want to see their campaign history.
    """
    campaigns: List[CampaignResponse] = Field(
        description="List of campaigns"
    )
    
    total: int = Field(
        description="Total number of campaigns",
        example=25
    )
    
    page: int = Field(
        description="Current page number",
        example=1
    )
    
    per_page: int = Field(
        description="Campaigns per page",
        example=10
    )
    
    has_more: bool = Field(
        description="Whether more pages are available",
        example=True
    )
