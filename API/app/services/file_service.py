"""
File Service for handling generated campaign assets.

This service manages file storage, serving, and cleanup for
marketing campaign outputs like images, emails, and social posts.
"""

import os
import shutil
from pathlib import Path
from typing import Optional, BinaryIO
from fastapi import HTTPException
from fastapi.responses import FileResponse

from app.utils.config import get_api_config
from app.utils.logging import setup_logging


class FileService:
    """
    Service for managing campaign-generated files.
    
    Handles:
    - File storage and organization
    - Secure file serving via API
    - File cleanup and space management
    - MIME type detection
    """
    
    def __init__(self):
        """Initialize the file service."""
        self.config = get_api_config()
        self.logger = setup_logging()
        
        # Storage configuration
        self.storage_path = Path(self.config.file_storage_path)
        self.storage_path.mkdir(parents=True, exist_ok=True)
        
        # Allowed file types for security
        self.allowed_extensions = {
            '.png', '.jpg', '.jpeg', '.gif',  # Images
            '.html', '.txt', '.json',         # Text files
            '.pdf'                            # Documents
        }
        
        # MIME type mapping
        self.mime_types = {
            '.png': 'image/png',
            '.jpg': 'image/jpeg', 
            '.jpeg': 'image/jpeg',
            '.gif': 'image/gif',
            '.html': 'text/html',
            '.txt': 'text/plain',
            '.json': 'application/json',
            '.pdf': 'application/pdf'
        }
        
        self.logger.info(f"📁 File service initialized (storage: {self.storage_path})")

    def get_campaign_folder(self, campaign_id: str) -> Path:
        """Get the storage folder for a specific campaign."""
        campaign_folder = self.storage_path / campaign_id
        campaign_folder.mkdir(exist_ok=True)
        return campaign_folder

    def store_file(self, campaign_id: str, filename: str, content: bytes) -> str:
        """
        Store a file for a campaign.
        
        Args:
            campaign_id: The campaign identifier
            filename: Name of the file to store
            content: File content as bytes
            
        Returns:
            Relative file path for URL generation
        """
        # Validate file extension
        file_ext = Path(filename).suffix.lower()
        if file_ext not in self.allowed_extensions:
            raise ValueError(f"File type {file_ext} not allowed")
        
        # Get campaign folder
        campaign_folder = self.get_campaign_folder(campaign_id)
        file_path = campaign_folder / filename
        
        # Write file
        try:
            file_path.write_bytes(content)
            self.logger.info(f"💾 Stored file: {file_path}")
            return f"{campaign_id}/{filename}"
            
        except Exception as e:
            self.logger.error(f"❌ Failed to store file {filename}: {str(e)}")
            raise

    def copy_generated_file(self, campaign_id: str, source_path: str, dest_filename: str) -> Optional[str]:
        """
        Copy a file generated by the marketing agent to campaign storage.
        
        Args:
            campaign_id: The campaign identifier
            source_path: Path to the source file
            dest_filename: Desired filename in campaign storage
            
        Returns:
            Relative file path or None if source doesn't exist
        """
        source = Path(source_path)
        if not source.exists():
            self.logger.warning(f"⚠️ Source file not found: {source_path}")
            return None
        
        try:
            campaign_folder = self.get_campaign_folder(campaign_id)
            dest_path = campaign_folder / dest_filename
            
            shutil.copy2(source, dest_path)
            self.logger.info(f"📋 Copied file: {source} → {dest_path}")
            return f"{campaign_id}/{dest_filename}"
            
        except Exception as e:
            self.logger.error(f"❌ Failed to copy file {source_path}: {str(e)}")
            return None

    def get_file_path(self, campaign_id: str, filename: str) -> Path:
        """Get the full path to a campaign file."""
        return self.storage_path / campaign_id / filename

    def file_exists(self, campaign_id: str, filename: str) -> bool:
        """Check if a campaign file exists."""
        file_path = self.get_file_path(campaign_id, filename)
        return file_path.exists() and file_path.is_file()

    def get_file_response(self, campaign_id: str, filename: str) -> FileResponse:
        """
        Get a FastAPI FileResponse for serving a campaign file.
        
        Args:
            campaign_id: The campaign identifier
            filename: Name of the file to serve
            
        Returns:
            FileResponse for the requested file
            
        Raises:
            HTTPException: If file not found or access denied
        """
        # Validate filename for security
        if '..' in filename or filename.startswith('/'):
            raise HTTPException(status_code=400, detail="Invalid filename")
        
        file_path = self.get_file_path(campaign_id, filename)
        
        # Check if file exists
        if not file_path.exists():
            raise HTTPException(status_code=404, detail="File not found")
        
        # Check file extension
        file_ext = file_path.suffix.lower()
        if file_ext not in self.allowed_extensions:
            raise HTTPException(status_code=403, detail="File type not allowed")
        
        # Get MIME type
        media_type = self.mime_types.get(file_ext, 'application/octet-stream')
        
        # Return file response
        return FileResponse(
            path=file_path,
            media_type=media_type,
            filename=filename
        )

    def get_file_info(self, campaign_id: str, filename: str) -> Optional[dict]:
        """
        Get information about a campaign file.
        
        Returns:
            Dictionary with file metadata or None if file doesn't exist
        """
        file_path = self.get_file_path(campaign_id, filename)
        
        if not file_path.exists():
            return None
        
        stat = file_path.stat()
        
        return {
            "filename": filename,
            "size_bytes": stat.st_size,
            "size_human": self._format_file_size(stat.st_size),
            "modified_at": stat.st_mtime,
            "extension": file_path.suffix.lower(),
            "mime_type": self.mime_types.get(file_path.suffix.lower(), 'application/octet-stream')
        }

    def list_campaign_files(self, campaign_id: str) -> list[dict]:
        """
        List all files for a campaign.
        
        Returns:
            List of file information dictionaries
        """
        campaign_folder = self.get_campaign_folder(campaign_id)
        files = []
        
        try:
            for file_path in campaign_folder.iterdir():
                if file_path.is_file():
                    file_info = self.get_file_info(campaign_id, file_path.name)
                    if file_info:
                        files.append(file_info)
        except Exception as e:
            self.logger.error(f"❌ Failed to list files for campaign {campaign_id}: {str(e)}")
        
        return sorted(files, key=lambda x: x['filename'])

    def delete_campaign_files(self, campaign_id: str) -> bool:
        """
        Delete all files for a campaign.
        
        Args:
            campaign_id: The campaign identifier
            
        Returns:
            True if successful, False otherwise
        """
        try:
            campaign_folder = self.get_campaign_folder(campaign_id)
            if campaign_folder.exists():
                shutil.rmtree(campaign_folder)
                self.logger.info(f"🗑️ Deleted campaign files: {campaign_id}")
                return True
            return False
            
        except Exception as e:
            self.logger.error(f"❌ Failed to delete campaign files {campaign_id}: {str(e)}")
            return False

    def cleanup_old_files(self, max_age_days: int = 30) -> int:
        """
        Clean up old campaign files to manage storage space.
        
        Args:
            max_age_days: Delete files older than this many days
            
        Returns:
            Number of campaigns cleaned up
        """
        import time
        
        cleanup_count = 0
        cutoff_time = time.time() - (max_age_days * 24 * 60 * 60)
        
        try:
            for campaign_folder in self.storage_path.iterdir():
                if campaign_folder.is_dir():
                    # Check folder modification time
                    if campaign_folder.stat().st_mtime < cutoff_time:
                        shutil.rmtree(campaign_folder)
                        cleanup_count += 1
                        self.logger.info(f"🧹 Cleaned up old campaign: {campaign_folder.name}")
            
            if cleanup_count > 0:
                self.logger.info(f"✅ Cleanup complete: removed {cleanup_count} old campaigns")
            
        except Exception as e:
            self.logger.error(f"❌ Cleanup failed: {str(e)}")
        
        return cleanup_count

    def get_storage_stats(self) -> dict:
        """Get storage usage statistics."""
        total_size = 0
        file_count = 0
        campaign_count = 0
        
        try:
            for campaign_folder in self.storage_path.iterdir():
                if campaign_folder.is_dir():
                    campaign_count += 1
                    for file_path in campaign_folder.rglob('*'):
                        if file_path.is_file():
                            total_size += file_path.stat().st_size
                            file_count += 1
        
        except Exception as e:
            self.logger.error(f"❌ Failed to get storage stats: {str(e)}")
        
        return {
            "total_size_bytes": total_size,
            "total_size_human": self._format_file_size(total_size),
            "file_count": file_count,
            "campaign_count": campaign_count,
            "storage_path": str(self.storage_path)
        }

    def _format_file_size(self, size_bytes: int) -> str:
        """Format file size in human-readable format."""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"


# Global file service instance
file_service = FileService()
