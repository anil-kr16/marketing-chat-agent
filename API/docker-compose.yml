# Docker Compose for Marketing Agent API
# Complete development and production setup

version: '3.8'

services:
  # Main API service
  marketing-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Core settings
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
      
      # Redis connection
      - REDIS_URL=redis://redis:6379/0
      
      # Database connection (if using PostgreSQL)
      - DATABASE_URL=postgresql://marketing:password@postgres:5432/marketing_api
      
      # File storage
      - FILE_STORAGE_PATH=/app/storage
      
      # Security
      - API_KEY_HEADER=X-API-Key
      - DEFAULT_API_KEY=${API_KEY:-demo-key-12345}
      
      # Channel configuration
      - ENABLE_EMAIL=true
      - ENABLE_FACEBOOK=true
      - ENABLE_INSTAGRAM=true
      - DRY_RUN=true
      
    volumes:
      # Persistent storage for generated files
      - marketing_storage:/app/storage
      
      # Development: mount code for hot reload
      # - .:/app
    
    depends_on:
      - redis
      # - postgres  # Uncomment if using database
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database (optional - for production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=marketing_api
      - POSTGRES_USER=marketing
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketing -d marketing_api"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    depends_on:
      - marketing-api
    restart: unless-stopped
    profiles:
      - production  # Only start with --profile production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  # Persistent storage volumes
  marketing_storage:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: marketing_api_network
